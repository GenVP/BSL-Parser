
 // Генератор технической документации по парсеру

Перем Токены, Узлы, Директивы, ИнструкцииПрепроцессора;
Перем Область, Подобласть, УровеньОбласти;
Перем Комментарии;
Перем Результат;

Процедура Инициализировать(Парсер) Экспорт
	Токены = Парсер.Токены();
	Узлы = Парсер.Узлы();
	Директивы = Парсер.Директивы();
	ИнструкцииПрепроцессора = Парсер.ИнструкцииПрепроцессора();
	Результат = Новый Массив;
	Результат.Добавить(
		"<!DOCTYPE html>
		|<html>
		|<head>
		|<meta http-equiv='Content-Type' content='text/html; charset=utf-8'>
		|<title>BSL-Parser</title>
		|<link rel='stylesheet' type='text/css' href='ast.css'>
		|</head>
		|<body>
		|<header>
		|<h1>BSL-Parser</h1>
		|</header>
		|<h1>Примеры использования парсера</h1>
		|<pre>
		|
		|// 1C:Enterprise 8.3.11
		|
		|Парсер = ВнешниеОбработки.Создать(ПарсерПуть, False);
		|Плагины = Новый Массив;
		|
		|Плагин1 = ВнешниеОбработки.Создать(ПлагинПуть1, False);
		|Плагины.Добавить(Плагин1);
		|
		|Плагин2 = ВнешниеОбработки.Создать(ПлагинПуть2, False);
		|Плагины.Добавить(Плагин2);
		|
		|Модуль = Парсер.РазобратьМодуль(Исходник.ПолучитьТекст());
		|Парсер.Подключить(Плагины);
		|Парсер.ПосетитьМодуль(Модуль);
		|
		|Сообщить(Плагин1.Result());
		|Сообщить(Плагин2.Result());
		|
		|// OneScript
		|
		|AttachScript(""..\src\BSLParser\Ext\ObjectМодуль.bsl"", ""Парсер"");
		|AttachScript(""..\plugins\TestVars\src\TestVars\Ext\ObjectМодуль.bsl"", ""ПлагинПроверкаИспользованияПеременных"");
		|
		|ЧтениеТекста = Новый ЧтениеТекста(""..\src\BSLParser\Ext\ObjectМодуль.bsl"");
		|Исходник = ЧтениеТекста.Прочитать();
		|
		|Парсер = Новый BSLParser;
		|Парсер.ПоложениеУзлаВАСТ = Ложь;
		|Модуль = BSLParser.РазобратьМодуль(Исходник);
		|
		|ПлагинПроверкаИспользованияПеременных = Новый ПлагинПроверкаИспользованияПеременных;
		|Парсер.Подключить(ПлагинПроверкаИспользованияПеременных);
		|Парсер.ПосетитьМодуль(Модуль);
		|
		|Сообщить(ПлагинПроверкаИспользованияПеременных.Результат());
		|</pre>
		|<h1>Шаблон плагина</h1>
		|<pre>
		|Перем Токены, Узлы, Директивы, ИнструкцииПрепроцессора, СимволыПрепроцессора;
		|Перем Результат;
		|
		|Процедура Инициализировать(Парсер) Экспорт
		|	Токены = Парсер.Токены();
		|	Узлы = Парсер.Узлы();
		|	Директивы = Парсер.Директивы();
		|	ИнструкцииПрепроцессора = Парсер.ИнструкцииПрепроцессора();
		|	СимволыПрепроцессора = Парсер.СимволыПрепроцессора();
		|	Результат = Новый Массив;
		|КонецПроцедуры // Инициализировать()
		|
		|Функция Результат() Экспорт
		|	// ...
		|	Возврат СтрСоединить(Результат);
		|КонецФункции // Результат()
		|
		|Функция Интерфейс() Экспорт
		|	Перем Интерфейс;
		|	Интерфейс = Новый Массив;
		|	// Интерфейс.Добавить(""ПосетитьИнструкциюПрисваивания"");
		|	// Интерфейс.Добавить(""ПослеПосещенияИнструкцииПрисваивания"");
		|	...
		|	Возврат Интерфейс;
		|КонецФункции // Интерфейс()
		|
		|#Область Подписки
		|
		|// Процедура ПосетитьИнструкциюПрисваивания(ИнструкцияПрисваивания, Стек, Счетчики) Экспорт
		|// КонецПроцедуры // ПосетитьИнструкциюПрисваивания()
		|
		|// Процедура ПослеПосещенияИнструкцииПрисваивания(ИнструкцияПрисваивания, Стек, Счетчики) Экспорт
		|// КонецПроцедуры // ПослеПосещенияИнструкцииПрисваивания()
		|
		|#КонецОбласти // Подписки
		|</pre>"
		""
	);
	УровеньОбласти = 0;
КонецПроцедуры // Инициализировать()

Функция Результат() Экспорт
	Результат.Добавить(
		"<h2 id='#Other'>#Other</h2>
		|<h3 id='Место'>Место</h3>
		|<ul>
		|	<li><strong>Pos</strong>: число</li>
		|	<li><strong>Len</strong>: число</li>
		|	<li><strong>НомерСтрокиНачала</strong>: число</li>
		|	<li><strong>EndLine</strong>: число</li>
		|</ul>
		|</body>
		|</html>"
	);
	Результат.Добавить("<h2 id='#Enums'>#Enums</h2>");
	Результат.Добавить(ВывестиПеречисление("Директивы", Директивы));
	Результат.Добавить(ВывестиПеречисление("ИнструкцииПрепроцессора", ИнструкцииПрепроцессора));
	Результат.Добавить(ВывестиПеречисление("Узлы", Узлы, Истина));
	Результат.Добавить(ВывестиПеречисление("Токены", Токены));
	Возврат СтрСоединить(Результат);
КонецФункции // Результат()

Функция ВывестиПеречисление(Имя, Перечисление, ВыводитьСсылки = Ложь)
	Перем Буфер;
	Буфер = Новый Массив;
	Буфер.Добавить(СтрШаблон(
			"<h3 id='%1'>%1</h3>
			|<ul>", 
			Имя
		));
	ЗначенияПеречисления = Новый Структура;
	Для Каждого Элемент Из Перечисление Цикл 
		ЗначенияПеречисления.Вставить(Элемент.Значение);	
	КонецЦикла;
	Для Каждого Элемент Из ЗначенияПеречисления Цикл 
		Если ВыводитьСсылки Тогда 
			Буфер.Добавить(СтрШаблон("<li>""<a href='#%1'>%1</a>""</li>" "", Элемент.Ключ));		
		Иначе 
			Буфер.Добавить(СтрШаблон("<li>""%1""</li>" "", Элемент.Ключ));		
		КонецЕсли;	
	КонецЦикла;
	Буфер.Добавить("</ul>" "");
	Возврат СтрСоединить(Буфер);
КонецФункции // ВывестиПеречисление()

Функция Интерфейс() Экспорт
	Перем Интерфейс;
	Интерфейс = Новый Массив;
	Интерфейс.Добавить("ПосетитьМодуль");
	Интерфейс.Добавить("ПосетитьИнструкциюПрепроцессора");
	Интерфейс.Добавить("ПосетитьВыражениеНовый");
	Возврат Интерфейс;
КонецФункции // Интерфейс()

Процедура ПосетитьМодуль(Модуль, Стек, Счетчики) Экспорт
	Комментарии = Модуль.Комментарии;
КонецПроцедуры // ПосетитьМодуль

Процедура ПосетитьИнструкциюПрепроцессора(ИнструкцияПрепроцессора, Стек, Счетчики) Экспорт
	Если ИнструкцияПрепроцессора.Тип = Узлы.ИнструкцияПрепроцессораОбласть Тогда 
		Если УровеньОбласти = 0 Тогда 
			Область = ИнструкцияПрепроцессора.Имя;
			Подобласть = "";
			Если Область = "АбстрактноеСинтаксическоеДерево" Тогда 
				Результат.Добавить("	<h1>Абстрактное синтаксическое дерево</h1>" "");			
			КонецЕсли;		
		ИначеЕсли УровеньОбласти = 1 Тогда 
			Подобласть = ИнструкцияПрепроцессора.Имя;
			Если Область = "АбстрактноеСинтаксическоеДерево" Тогда 
				Результат.Добавить(СтрШаблон("	<h2 id='#%1'>#%1</h2>" "", Подобласть));			
			КонецЕсли;		
		КонецЕсли;
		УровеньОбласти = УровеньОбласти + 1;	
	ИначеЕсли ИнструкцияПрепроцессора.Тип = Узлы.ИнструкцияПрепроцессораКонецОбласти Тогда 
		УровеньОбласти = УровеньОбласти - 1;
		Если УровеньОбласти = 0 Тогда 
			Область = "";		
		ИначеЕсли УровеньОбласти = 1 Тогда 
			Подобласть = "";		
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры // ПосетитьИнструкциюПрепроцессора()

Процедура ПосетитьВыражениеНовый(ВыражениеНовый, Стек, Счетчики) Экспорт
	
	Если Область = "АбстрактноеСинтаксическоеДерево" Тогда 
		
		Если ВыражениеНовый.Имя = "Структура" Тогда 
			Тег = Комментарии[ВыражениеНовый.Место.НомерСтрокиНачала];
			Если Тег <> Неопределено И СтрНайти(Тег, "@Node") Тогда 
				
				СписокОписаний = Новый СписокЗначений;
				
				НомерСтрокиОписания = ВыражениеНовый.Место.НомерСтрокиНачала - 1;
				Описание = Комментарии[НомерСтрокиОписания];
				Пока Описание <> Неопределено Цикл
					СписокОписаний.Вставить(0, Описание);
					НомерСтрокиОписания = НомерСтрокиОписания - 1;
					Описание = Комментарии[НомерСтрокиОписания];				
				КонецЦикла;
				
				ПоляУзла = ВыражениеНовый.Аргументы[0].Список;
				ИмяУзла = ВыражениеНовый.Аргументы[1].Хвост[0].Имя;
				
				Результат.Добавить(СтрШаблон(
					"	<h3 id='%1'>%1<a class='permalink' href='#%1'>¶</a></h3>
					|	<ul>" "", 
					ИмяУзла
				));
				
				КоличествоОписаний = СписокОписаний.Количество();
				Индекс = 0;
				Пока Индекс < КоличествоОписаний Цикл
					Элемент = СписокОписаний[Индекс];
					Если СокрЛП(Элемент.Значение) = "<pre>" Тогда 
						Буфер = Новый Массив;
						Пока СокрЛП(Элемент.Значение) <> "</pre>" Цикл
							Буфер.Добавить(Элемент.Значение);
							Индекс = Индекс + 1;
							Элемент = СписокОписаний[Индекс];						
						КонецЦикла;
						Результат.Добавить(СтрСоединить(Буфер, Символы.ПС));
						Результат.Добавить("</pre>");					
					Иначе 
						Результат.Добавить(СтрШаблон("	<i>%1</i><br>" "", Элемент.Значение));					
					КонецЕсли;
					Индекс = Индекс + 1;				
				КонецЦикла;
				
				Результат.Добавить("	<p>");
				
				Для Каждого Поле Из ПоляУзла Цикл 
					ИмяПоля = СокрЛП(Поле.Значение);
					Если Прав(ИмяПоля, 1) = "," Тогда 
						ИмяПоля = Лев(ИмяПоля, СтрДлина(ИмяПоля) - 1);					
					КонецЕсли;
					СписокТипов = РазобратьТипы(Комментарии[Поле.Место.НомерСтрокиНачала]);
					Результат.Добавить(СтрШаблон(
						"		<li><strong>%1</strong>: %2%3</li>" "", 
						ИмяПоля, 
						ВывестиСсылкиНаТипы(СписокТипов), 
						?(ИмяПоля = "Тип", " = Узлы." + ИмяУзла, "")
					));				
				КонецЦикла;
				
				Результат.Добавить("	</ul>" "");			
			
			КонецЕсли;		
		КонецЕсли;	
	
	КонецЕсли;

КонецПроцедуры // ПосетитьВыражениеНовый()

Функция ВывестиСсылкиНаТипы(СписокТипов)
	Перем Буфер;
	Буфер = Новый Массив;
	Для Каждого Элемент Из СписокТипов Цикл 
		Если Элемент.Подчиненный = Неопределено Тогда 
			Если НРег(Элемент.Идентификатор) = Элемент.Идентификатор Тогда 
				Буфер.Добавить(Элемент.Идентификатор);			
			Иначе 
				Буфер.Добавить(СтрШаблон(
					"<a href='#%1'>%1</a>", 
					Элемент.Идентификатор
				));			
			КонецЕсли;		
		ИначеЕсли TypeOf(Элемент.Подчиненный) = Type("Строка") Тогда 
			Буфер.Добавить(СтрШаблон(
				"%1 <a href='#%2'>%2</a>", 
				Элемент.Идентификатор, 
				Элемент.Подчиненный
			));		
		Иначе 
			Буфер.Добавить(СтрШаблон(
				"%1 (%2)", 
				Элемент.Идентификатор, 
				ВывестиСсылкиНаТипы(Элемент.Подчиненный)
			));		
		КонецЕсли;	
	КонецЦикла;
	Возврат СтрСоединить(Буфер, ", ");
КонецФункции // ВывестиСсылкиНаТипы()

#Область ПарсерТипов

Функция РазобратьТипы(Типы)
	Перем Позиция, Идентификатор, Список;
	Позиция = 1; Список = Новый Массив;
	Пока Истина Цикл
		Подчиненный = Неопределено;
		ПропуститьНевидимые(Типы, Позиция);
		Идентификатор = Идентификатор(Типы, Позиция);
		ПропуститьНевидимые(Типы, Позиция);
		Если Идентификатор = "один" Тогда 
			Если Сред(Типы, Позиция, 2) <> "из" Тогда 
				ВызватьИсключение "ошибка";			
			КонецЕсли;
			Позиция = Позиция + 2;
			Идентификатор = "один из";
			ПропуститьНевидимые(Типы, Позиция);
			Подчиненный = Идентификатор(Типы, Позиция);		
		ИначеЕсли Сред(Типы, Позиция, 1) = "(" Тогда 
			Позиция = Позиция + 1;
			Начало = Позиция;
			ПропуститьДо(Типы, Позиция, ")");
			Подчиненный = РазобратьТипы(Сред(Типы, Начало, Позиция - Начало));
			Позиция = Позиция + 1;		
		КонецЕсли;
		Список.Добавить(Новый Structure("Идентификатор, Подчиненный", Идентификатор, Подчиненный));
		Если Сред(Типы, Позиция, 1) <> "," Тогда 
			Прервать;		
		КонецЕсли;
		Позиция = Позиция + 1;	
	КонецЦикла;
	Возврат Список;
КонецФункции // РазобратьТипы()

Процедура ПропуститьНевидимые(Строка, Позиция)
	Для Позиция = Позиция По СтрДлина(Строка) Цикл 
		Если Не ПустаяСтрока(Сред(Строка, Позиция, 1)) Тогда 
			Прервать;		
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // ПропуститьНевидимые()

Процедура ПропуститьДо(Строка, Позиция, Символ)
	Для Позиция = Позиция По СтрДлина(Строка) Цикл 
		Если Сред(Строка, Позиция, 1) = Символ Тогда 
			Прервать;		
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // ПропуститьДо()

Функция Идентификатор(Строка, Позиция)
	Перем Начало, Символ;
	Начало = Позиция;
	Для Позиция = Позиция По СтрДлина(Строка) Цикл 
		Символ = Сред(Строка, Позиция, 1);
		Если ПустаяСтрока(Символ) Or Символ = "," Тогда 
			Прервать;		
		КонецЕсли;	
	КонецЦикла;
	Возврат Сред(Строка, Начало, Позиция - Начало);
КонецФункции // Идентификатор()

#КонецОбласти